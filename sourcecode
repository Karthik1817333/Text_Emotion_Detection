import numpy as np
import pandas as pd
import seaborn as sns
from sklearn.pipeline import Pipeline
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.svm import SVC
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
df = pd.read_csv('emotion_dataset.csv')
df.head()
df['Emotion'].value_counts()
sns.countplot(x='Emotion',data=df)
import neattext.functions as nfx
df['Clean_text']=df['Text'].apply(nfx.remove_stopwords)
dir(nfx)
df['Clean_text']=df['Clean_text'].apply(nfx.remove_special_characters)
x=df['Clean_text']
y=df['Emotion']
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=42)
from sklearn.linear_model import LogisticRegression
pipe_lr=Pipeline(steps=[('cv',CountVectorizer()),('lr',LogisticRegression())])
pipe_lr.fit(x_train,y_train)
pipe_lr.score(x_test,y_test)
from sklearn.svm import SVC
pipe_svc=Pipeline(steps=[('cv',CountVectorizer()),('svc',SVC(kernel='rbf',C=10))])
pipe_svc.fit(x_train,y_train)
pipe_svc.score(x_test,y_test)
from sklearn.ensemble import RandomForestClassifier
pipe_rf=Pipeline(steps=[('cv',CountVectorizer()),('rf',RandomForestClassifier(n_estimators=10))])
pipe_rf.fit(x_train,y_train)
pipe_rf.score(x_test,y_test)
import joblib
pipeline_file=open('text_emotion_classifier.pkl','wb')
joblib.dump(pipe_rf,pipeline_file)
pipeline_file.close()
